/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'org.testng:testng:6.14.3'
    implementation("org.uncommons:reportng:1.1.4") {
        exclude group: "org.testng", module: "testng"
    }
    implementation 'com.google.inject:guice:3.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.json:json:20220924'
    implementation 'com.google.cloud:google-cloud-storage:2.16.0'
    implementation 'net.rcarz:jira-client:0.5'
    implementation 'com.mysql:mysql-connector-j:8.0.31'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.opencsv:opencsv:5.7.1'
}

group = 'msr5464'
version = '0.0.1'
description = 'QA-Dashboard'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.named('test') {
        useTestNG {
        suiteName = 'Worker Execution Report'
        testName = 'PaymentGatewayNumbers'
        parallel = 'methods'
        threadCount = 10
        includeGroups 'dataPopulator'
        useDefaultListeners = true
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        systemProperties "org.uncommons.reportng.title": "Data Collector Report"
		systemProperties "org.uncommons.reportng.escape-output": "false"
        testLogging.showStandardStreams = true
        testLogging {
	        afterSuite { desc, result ->
	            if (!desc.parent) {
	                def output = "Overall Result: ${result.resultType} (${result.testCount - result.skippedTestCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed)"
	                def startItem = '|  ', endItem = '  |'
	                def repeatLength = startItem.length() + output.length() + endItem.length()
	                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
	            }
	        }
	    }
        reports.html.enabled = true
        outputDirectory = file("$projectDir/test-output")
    }
}